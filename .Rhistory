tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
stangle <- untangle.specials(Terms, 'strata') # used multipl
stangle
stangle <- survivaluntangle.specials(Terms, 'strata') # used multipl
stangle <- survival::untangle.specials(Terms, 'strata') # used multipl
stangle
Terms
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
temp
mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=object$xlevels)
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=object$xlevels)
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=fit$xlevels)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
strata2
Terms2
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2
factor(strata2, levels=levels(strata))
temp
strata
strats
stemp <- untangle.specials(Terms, 'strata', 1)
if (length(stemp$vars)==1) strata.keep <- mf[[stemp$vars]]
else strata.keep <- strata(mf[,stemp$vars], shortlabel=TRUE)
strats <- as.numeric(strata.keep)
stemp <- untangle.specials(Terms, 'strata', 1)
stemp
strata.keep <- mf[[stemp$vars]]
strata.keep
strats <- as.numeric(strata.keep)
strsts
strats
fit$strata
fit
fit <- coxph(Surv(futime, fustat)~age + strata(rx), data=ovrian, model=TRUE)
fit <- coxph(Surv(futime, fustat)~age + strata(rx), data=ovarian, model=TRUE)
fit
fit$strata
object(fit)
objects(fit)
fit <- coxph(Surv(futime, fustat)~age + strata(rx), data=ovarian, model=TRUE, x=TRUE)
fit$strata
strata <- fit$strata
strats <- as.factor(strats)
Strata <- levels(strats)
strats
Strata
ns
ns <- length(Strata)
ms
ns
object <- fit
stangle <- untangle.specials(Terms, 'strata') # used multiple times
strata <- object$strata #try this first
if (is.null(strata)){
if (length(stangle$vars) ==1) strata <- mf[[stangle$vars]]
else strata <- strata(mf[, stangle$vars], shortlabel=TRUE)
}
if (!missing(start.time)) strata <- strata[keep]
strata
stangle
temp <- attr(Terms, "specials")$strata
factors <- attr(Terms, "factors")[temp,]
strata.interaction <- any(t(factors)*attr(Terms, "order") >1)
factors
Terms2 <- Terms
found.strata <- TRUE
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=object$xlevels)
mf2
mf2
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=object$xlevels)
Terms2 <- delete.response(Terms)
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=object$xlevels)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
temp2
strata2
Strata
levels(strata2)
which(strata2)
which(strata2 == Strata)
strata2 == Strata
strats
strata2 <- as.factor(strata2)
strata2
fit$strata
strats <- fit$strata
strats <- as.factor(strats)
Strata <- levels(strats)
strats
Strata
which(stras == Strata)
which(strats == Strata)
strata2 == Strata
match(strata2, Strata)
fit$y
length(fit$y)
strata2
match(factor(rx=1, rx=2), Strata)
newdsta
stras
strats
newdata = list(age=c(1,2,3,4), rx=1,2,1,2)
newdata
newdata = list(age=c(1,2,3,4), rx=c(1,2,1,2))
newdata
if (is.vector(newdata, "numeric")) {
if (is.null(names(newdata))) {
stop("Newdata argument must be a data frame")
}
newdata <- data.frame(as.list(newdata))
}
newdata
has.strata
found.strata <- TRUE
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
if(!found.strata) stop("Newdata has no strata values")
if (found.strata) mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=fit$xlevels)
na.action = na.pass
found.strata <- TRUE
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
if(!found.strata) stop("Newdata has no strata values")
if (found.strata) mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=fit$xlevels)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
if (any(is.na(strata2)))
stop("New data set has strata levels not found in the original")
# An expression like age:strata(sex) will have temp$vars= "strata(sex)"
#  and temp$terms = integer(0).  This does not work as a subscript
if (length(temp$terms) >0) Terms2 <- Terms2[-temp$terms]
Terms2
strata2
Strata <- levels(strata2)
ns <- length(Strata)
whichstr <- match(strata2, Strata)
whichstr
total_subtype
newdata
length(newdata)
mf2
nvar=2
as.list(rep(0, nvar))
model.matrix(Terms2, mf2)
ncol(mf2)
x2 <- model.matrix(Terms2, mf2)[,-1, drop=FALSE]
x2
x[,'age']
x2[,'age']
x2[,'age']
names(x2)
colnames(x2)
Terms
newdata
dim(newdata)
length(newdata)
mf
n=3
seq(1,3)
strata2
a <- c(1,2,3,4)
b <- c(5,6)
outer(a, b, '*')
stats::model.frame(Terms2, data=dnewdata, na.action=na.action, xlev=fit$xlevels)
dmewdata
document()
library(devtools)
document()
document()
document()
document()
library(devtools)
document()
document()
document()
install.packages("timereg")
?wald.test
??wald.test
edit(wald.test)
edit(wald.test)
m <- AIPWsubtype(formula = Surv(start, time, status) ~ Xconstvar = NULL + strata(W),
data = sim.data0[, -c(2, 7, 8, 9)], id = "nid", missing_model = list(~time +
X), two_stage = two_stage, marker_name = "y2",
second_cont_bl = FALSE, second_cont_rr = FALSE)
document()
document()
document()
document()
document()
document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
document()
a = 3
b = 5
a>b
a = c("a", "b", "c")
b = c("a", "d")
diff(a,b)
b = c("a")
diff(a,b)
setdiff(a,b)
document()
500-193.29
library(AIPWsubtype)
??AIPWsubtype
?AIPWsubtype
document()
library(devtools)
document()
pdf("fig-ms-healthy-disease-death1.pdf",
width=6, height=4)
par(mai=c(0.01,0.01,0.01,0.01))
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "0", cex=1.5)
text(1.5, 4.5, "HEALTHY", cex=1.2)
rect(1,1,2,2)
text(1.5, 1.5, "3", cex=1.5)
text(1.5, 0.5, "DISEASE-FREE", cex=1.2)
text(1.5, 0, "DEATH", cex=1.2)
rect(4,3,5,4)
text(4.5, 3.5, "1", cex=1.5)
text(4.5, 4.5, "DISEASE", cex=1.2)
rect(7,3,8,4)
text(7.5, 3.5, "2", cex=1.5)
text(7.5, 4.5, "POST-DISEASE", cex=1.2)
text(7.5, 5, "DEATH", cex=1.2)
dev.off()
par(mai=c(0.01,0.01,0.01,0.01))
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
r
rect(1,3,2,4)
text(1.5, 3.5, "0", cex=1.5)
text(1.5, 4.5, "HEALTHY", cex=1.2)
rect(1,1,2,2)
text(1.5, 1.5, "3", cex=1.5)
text(1.5, 0.5, "DISEASE-FREE", cex=1.2)
text(1.5, 0, "DEATH", cex=1.2)
rect(4,3,5,4)
text(4.5, 3.5, "1", cex=1.5)
text(4.5, 4.5, "DISEASE", cex=1.2)
rect(7,3,8,4)
text(7.5, 3.5, "2", cex=1.5)
text(7.5, 4.5, "POST-DISEASE", cex=1.2)
text(7.5, 5, "DEATH", cex=1.2)
par(mai=c(0.01,0.01,0.01,0.01))
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
text(1.5, 4.5, "HEALTHY", cex=1.2)
rect(1,1,2,2)
text(1.5, 1.5, "2A", cex=1.5)
text(1.5, 0.5, "DISEASE-FREE", cex=1.2)
text(1.5, 0, "DEATH", cex=1.2)
rect(4,3,5,4)
text(4.5, 3.5, "2B", cex=1.5)
text(4.5, 4.5, "DISEASE", cex=1.2)
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
text(1.5, 4.5, "HEALTHY", cex=1.2)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
text(4.5, 4.5, "DISEASE", cex=1.2)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
text(7.5, 4.5, "POST-DISEASE", cex=1.2)
text(7.5, 5, "DEATH", cex=1.2)
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
text(1.5, 4.5, "HEALTHY", cex=1.2)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
text(4.5, 4.5, "DISEASE", cex=1.2)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
text(7.5, 4.5, "POST-DISEASE", cex=1.2)
text(7.5, 5, "DEATH", cex=1.2)
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
arrows(2.2, 3.5, 3.8, 3.5, length=0.1, lwd=2)
arrows(5.2, 3.5, 6.8, 3.5, length=0.1, lwd=2)
arrows(1.5, 2.9, 1.5, 2.1, length=0.1, lwd=2)
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
arrows(2.2, 3.5, 3.8, 3.5, length=0.1, lwd=2)
arrows(5.2, 3.5, 6.8, 3.5, length=0.1, lwd=2)
arrows(2.2, 1.5, 1.5, 2.1, length=0.1, lwd=2)
arrows(2.2, 1.5, 2.2, 1.8, length=0.1, lwd=2)
arrows(1.5, 1.5, 1.5, 2, length=0.1, lwd=2)
arrows(1.5, 1, 1.5, 1.5, length=0.1, lwd=2)
arrows(1.5, 3, 1.5, 3.5, length=0.1, lwd=2)
arrows(1.5, 2, 1.5, 2.5, length=0.1, lwd=2)
arrows(1.5, 2.5, 1.5, 3, length=0.1, lwd=2)
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
arrows(2.2, 3.5, 3.8, 3.5, length=0.1, lwd=2)
arrows(5.2, 3.5, 6.8, 3.5, length=0.1, lwd=2)
arrows(1.5, 2.5, 1.5, 3, length=0.1, lwd=2)
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
arrows(2.2, 3.5, 3.8, 3.5, length=0.1, lwd=2)
arrows(5.2, 3.5, 6.8, 3.5, length=0.1, lwd=2)
arrows(1.5, 2.5, 1.5, 2.9, length=0.1, lwd=2)
arrows(1.5, 2.4, 1.5, 2.9, length=0.1, lwd=2)
arrows(1.5, 2.3, 1.5, 2.9, length=0.1, lwd=2)
lines(1.5, 2.3, 7.5, 2.3, length=0.1, lwd=2)
segments(1.5, 2.3, 7.5, 2.3, length=0.1, lwd=2)
segments(7.5, 2.3, 7.5, 2.9, lwd=2)
plot(0,0,type="n",axes=F,xlim=c(0.5,8.5), ylim=c(-0.5,5.5), xlab="", ylab="")
rect(1,3,2,4)
text(1.5, 3.5, "1", cex=1.5)
rect(4,3,5,4)
text(4.5, 3.5, "2A", cex=1.5)
rect(7,3,8,4)
text(7.5, 3.5, "2B", cex=1.5)
arrows(2.2, 3.5, 3.8, 3.5, length=0.1, lwd=2)
arrows(5.2, 3.5, 6.8, 3.5, length=0.1, lwd=2)
arrows(1.5, 2.3, 1.5, 2.9, length=0.1, lwd=2)
segments(1.5, 2.3, 7.5, 2.3, length=0.1, lwd=2)
segments(7.5, 2.3, 7.5, 2.9, lwd=2)
data("Fishing",package="Ecdat")
colnames(Fishing)[4:11] <- c("pr.beach","pr.pier","pr.boat","pr.charter",
"ca.beach","ca.pier","ca.boat","ca.charter")
Fish <- mlogit.data(Fishing,varying=c(4:11),shape="wide",choice="mode")
## a pure "conditional" model without intercepts
summary(mlogit(mode~pr+ca-1,data=Fish))
## a pure "multinomial model
summary(mlogit(mode~1|income,data=Fish))
## which can also be estimated using multinom (package nnet)
library(nnet)
summary(multinom(mode~income,data=Fishing))
install.packages("mlogit")
data("Fishing",package="Ecdat")
colnames(Fishing)[4:11] <- c("pr.beach","pr.pier","pr.boat","pr.charter",
"ca.beach","ca.pier","ca.boat","ca.charter")
Fish <- mlogit.data(Fishing,varying=c(4:11),shape="wide",choice="mode")
install.packages("Fishing")
data("Fishing",package="Ecdat")
colnames(Fishing)[4:11] <- c("pr.beach","pr.pier","pr.boat","pr.charter",
"ca.beach","ca.pier","ca.boat","ca.charter")
Fish <- mlogit.data(Fishing,varying=c(4:11),shape="wide",choice="mode")
## a pure "conditional" model without intercepts
summary(mlogit(mode~pr+ca-1,data=Fish))
## a pure "multinomial model
summary(mlogit(mode~1|income,data=Fish))
## which can also be estimated using multinom (package nnet)
library(nnet)
summary(multinom(mode~income,data=Fishing))
install.packages("Ecdat")
data("Fishing",package="Ecdat")
colnames(Fishing)[4:11] <- c("pr.beach","pr.pier","pr.boat","pr.charter",
"ca.beach","ca.pier","ca.boat","ca.charter")
Fish <- mlogit.data(Fishing,varying=c(4:11),shape="wide",choice="mode")
## a pure "conditional" model without intercepts
summary(mlogit(mode~pr+ca-1,data=Fish))
## a pure "multinomial model
summary(mlogit(mode~1|income,data=Fish))
## which can also be estimated using multinom (package nnet)
library(nnet)
summary(multinom(mode~income,data=Fishing))
library(mclogit)
library(mlogit)
summary(mlogit(mode~pr+ca-1,data=Fish))
## a pure "multinomial model
summary(mlogit(mode~1|income,data=Fish))
Fish <- mlogit.data(Fishing,varying=c(4:11),shape="wide",choice="mode")
## a pure "conditional" model without intercepts
summary(mlogit(mode~pr+ca-1,data=Fish))
## a pure "multinomial model
summary(mlogit(mode~1|income,data=Fish))
head(Fish)
head(Fishing)
library("mlogit")
data("Heating", package = "mlogit")
H
head(Heating)
H <- mlogit.data(Heating, shape = "wide", choice = "depvar", varying = c(3:12))
head(H)
12*5+
12*5
12*7
library(devtools)
library(Rcpp)
compileAttributes()
devtools::document()
devtools::document()
useDynLib('AIPWsubtype', .registration = TRUE)
importFrom('Rcpp', 'evalCpp')
devtools::document()
c(1,2,3) == c(1,2,3)
c(1,2,3) == c(1,2,3)
c(1,2,3) == c(1,2,3)
tmpdata <- mlogit.data(edata, shape="wide", choice="RR")
compileAttributes()
compileAttributes()
devtools::document()
a <- matrix(c(1,2,3,4))
a
a <- matrix(c(1,2,3,4), nrow=2)
a
b <- matrix(0, nrow=8, ncol=2)
b
b[c(2,4), ] <- a
b
dpR1 <- matrix(0, nrow=5*10, ncol=2)
dpR1
library(Rccp)
library(Rcpp)
compileAttributes()
compileAttributes()
warnings()
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
library(Rcpp)
compileAttributes()
