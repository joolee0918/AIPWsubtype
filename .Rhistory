library(formatR)
tidy_dir("R")
tidy_dir("src")
git init
git init
git init
git init
git init
git commit
library(ncvreg)
set.seed(4)
knitr::opts_knit$set(aliases=c(h = 'fig.height', w = 'fig.width'))
knitr::opts_chunk$set(comment="#", collapse=TRUE, cache=FALSE, tidy=FALSE)
knitr::knit_hooks$set(small.mar = function(before, options, envir) {
if (before) par(mar = c(4, 4, .1, .1))
})
data(Prostate)
X <- Prostate$X
y <- Prostate$y
fit <- ncvreg(X, y)
plot(fit)
coef(fit, lambda=0.05)
summary(fit, lambda=0.05)
cvfit <- cv.ncvreg(X, y)
plot(cvfit)
coef(cvfit)
predict(cvfit, X=head(X))     # Prediction of response for new observations
predict(cvfit, type="nvars")  # Number of nonzero coefficients
predict(cvfit, type="vars")   # Identity of the nonzero coefficients
level_y = list()
for(k in 1:n_marker){
level_y[[k]] = c(1,0)
}
tmpy = list()
for(k in 1:n_marker){
tmpy[[k]] = as.vector(level_y[[k]])
}
total_subtype = as.data.frame(expand.grid(tmpy))
y = as.matrix(cbind(1, total_subtype))
n_marker=2
level_y = list()
for(k in 1:n_marker){
level_y[[k]] = c(1,0)
}
tmpy = list()
for(k in 1:n_marker){
tmpy[[k]] = as.vector(level_y[[k]])
}
total_subtype = as.data.frame(expand.grid(tmpy))
y = as.matrix(cbind(1, total_subtype))
y
y = cbind(y, y[,2]*y[,3])
y
library(eha)
getHaz
getHat()
getHaz()
?getHaz
??getHaz
eha:::getHaz
citation(eha)
library(eha)
citation(eha)
citation
citaion(eha)
citation(eha)
eha
library(eha)
citation(eha)
??fitCuminc
?fitCuminc
??fitCuminc
formula <- Surv(start, time, status)~ X + cluster(id)
terms(formula)
data(ovarian)
head(ovarian)
fit <- coxph(Surv(futime, fustat) ~ age +strata(rx), data = ovarian)
fit$strata
fit
fit$strata
coxph.detail(fit)$strata
fit <- coxph(Surv(futime, fustat) ~ age +strata(rx), data = ovarian, model=TRUE)
fit$strata
strata(rx)
strata(ovarian$rx)
coxph.detail(fit)$strata
strata <- coxph.detail(fit)$strata
levels(strata)
strata <- coxph.detail(fit)$strata
strat
strata
levels(strata)
strata
attr(strata)
class(Strata)
class(strata)
strata[1]
strata[[1]]
strata[1]
newdata(age=40, rx=2)
newdata = list(age=40, rx=2)
subterms <- function(tt, i) {
dataClasses <- attr(tt, "dataClasses")
predvars <- attr(tt, "predvars")
oldnames <-  dimnames(attr(tt, 'factors'))[[1]]
tt <- tt[i]
index <- match(dimnames(attr(tt, 'factors'))[[1]], oldnames)
if (length(index) >0) {
if (!is.null(predvars))
attr(tt, "predvars") <- predvars[c(1, index+1)]
if (!is.null(dataClasses))
attr(tt, "dataClasses") <- dataClasses[index]
}
tt
}
mf <- fit$model
terms
Terms
Terms <- fit$terms
Temrs
Temrs
Terms
has.strata <- !is.null(temp)
temp <- attr(terms(object), 'specials')$strata
has.strata <- !is.null(temp)
temp <- attr(terms(fit), 'specials')$strata
has.strata <- !is.null(temp)
temp <- attr(Terms, "specials")$strata
factors <- attr(Terms, "factors")[temp,]
strata.interaction <- any(t(factors)*attr(Terms, "order") >1)
factors
temp
attr(Terms, "factors")
Terms2 <- Terms
if (!individual)  Terms2 <- delete.response(Terms)
if (is.vector(newdata, "numeric")) {
if (individual) stop("newdata must be a data frame")
if (is.null(names(newdata))) {
stop("Newdata argument must be a data frame")
}
newdata <- data.frame(as.list(newdata))
}
Terms2 <- delete.response(Terms)
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
tcall <- Call[c(1, match(c('id', "na.action"),
names(Call), nomatch=0))]
tcall$data <- newdata
tcall$formula <- Terms2
tcall$xlev <- object$xlevels
tcall[[1L]] <- quote(stats::model.frame)
mf2 <- eval(tcall)
found.strata <- has.strata # would have failed otherwise
tcall$data <- newdata
tcall$formula <- Terms2
tcall$xlev <- object$xlevels
tcall[[1L]] <- quote(stats::model.frame)
tcall <- list()
tcall$data <- newdata
tcall$formula <- Terms2
tcall$xlev <- object$xlevels
tcall[[1L]] <- quote(stats::model.frame)
mf2 <- eval(tcall)
tcall$data <- newdata
tcall$formula <- Terms2
tcall$xlev <- fit$xlevels
tcall[[1L]] <- quote(stats::model.frame)
mf2 <- eval(tcall)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
strata2
newdata
b
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
strat2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2
temp
temp <- survivla:::untangle.specials(Terms2, 'strata')
temp <- survival:::untangle.specials(Terms2, 'strata')
temp'temp'
temp
Terms2
temp <- survival:::untangle.specials(Terms2, 'strata')
temp
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
stangle <- untangle.specials(Terms, 'strata') # used multipl
stangle
stangle <- survivaluntangle.specials(Terms, 'strata') # used multipl
stangle <- survival::untangle.specials(Terms, 'strata') # used multipl
stangle
Terms
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
temp
mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=object$xlevels)
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=object$xlevels)
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=fit$xlevels)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
strata2
Terms2
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2
factor(strata2, levels=levels(strata))
temp
strata
strats
stemp <- untangle.specials(Terms, 'strata', 1)
if (length(stemp$vars)==1) strata.keep <- mf[[stemp$vars]]
else strata.keep <- strata(mf[,stemp$vars], shortlabel=TRUE)
strats <- as.numeric(strata.keep)
stemp <- untangle.specials(Terms, 'strata', 1)
stemp
strata.keep <- mf[[stemp$vars]]
strata.keep
strats <- as.numeric(strata.keep)
strsts
strats
fit$strata
fit
fit <- coxph(Surv(futime, fustat)~age + strata(rx), data=ovrian, model=TRUE)
fit <- coxph(Surv(futime, fustat)~age + strata(rx), data=ovarian, model=TRUE)
fit
fit$strata
object(fit)
objects(fit)
fit <- coxph(Surv(futime, fustat)~age + strata(rx), data=ovarian, model=TRUE, x=TRUE)
fit$strata
strata <- fit$strata
strats <- as.factor(strats)
Strata <- levels(strats)
strats
Strata
ns
ns <- length(Strata)
ms
ns
object <- fit
stangle <- untangle.specials(Terms, 'strata') # used multiple times
strata <- object$strata #try this first
if (is.null(strata)){
if (length(stangle$vars) ==1) strata <- mf[[stangle$vars]]
else strata <- strata(mf[, stangle$vars], shortlabel=TRUE)
}
if (!missing(start.time)) strata <- strata[keep]
strata
stangle
temp <- attr(Terms, "specials")$strata
factors <- attr(Terms, "factors")[temp,]
strata.interaction <- any(t(factors)*attr(Terms, "order") >1)
factors
Terms2 <- Terms
found.strata <- TRUE
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=object$xlevels)
mf2
mf2
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=object$xlevels)
Terms2 <- delete.response(Terms)
mf2 <- stats::model.frame(Terms2, data=newdata,
xlev=object$xlevels)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
temp2
strata2
Strata
levels(strata2)
which(strata2)
which(strata2 == Strata)
strata2 == Strata
strats
strata2 <- as.factor(strata2)
strata2
fit$strata
strats <- fit$strata
strats <- as.factor(strats)
Strata <- levels(strats)
strats
Strata
which(stras == Strata)
which(strats == Strata)
strata2 == Strata
match(strata2, Strata)
fit$y
length(fit$y)
strata2
match(factor(rx=1, rx=2), Strata)
newdsta
stras
strats
newdata = list(age=c(1,2,3,4), rx=1,2,1,2)
newdata
newdata = list(age=c(1,2,3,4), rx=c(1,2,1,2))
newdata
if (is.vector(newdata, "numeric")) {
if (is.null(names(newdata))) {
stop("Newdata argument must be a data frame")
}
newdata <- data.frame(as.list(newdata))
}
newdata
has.strata
found.strata <- TRUE
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
if(!found.strata) stop("Newdata has no strata values")
if (found.strata) mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=fit$xlevels)
na.action = na.pass
found.strata <- TRUE
tempenv <- new.env(, parent=emptyenv())
assign("strata", function(..., na.group, shortlabel, sep)
list(...), envir=tempenv)
assign("list", list, envir=tempenv)
for (svar in stangle$vars) {
temp <- try(eval(parse(text=svar), newdata, tempenv),
silent=TRUE)
if (!is.list(temp) ||
any(unlist(lapply(temp, class))== "function"))
found.strata <- FALSE
}
if(!found.strata) stop("Newdata has no strata values")
if (found.strata) mf2 <- stats::model.frame(Terms2, data=newdata,
na.action=na.action, xlev=fit$xlevels)
mf2
temp <- untangle.specials(Terms2, 'strata')
strata2 <- strata(mf2[temp$vars], shortlabel=TRUE)
strata2 <- factor(strata2, levels=levels(strata))
if (any(is.na(strata2)))
stop("New data set has strata levels not found in the original")
# An expression like age:strata(sex) will have temp$vars= "strata(sex)"
#  and temp$terms = integer(0).  This does not work as a subscript
if (length(temp$terms) >0) Terms2 <- Terms2[-temp$terms]
Terms2
strata2
Strata <- levels(strata2)
ns <- length(Strata)
whichstr <- match(strata2, Strata)
whichstr
total_subtype
newdata
length(newdata)
mf2
nvar=2
as.list(rep(0, nvar))
model.matrix(Terms2, mf2)
ncol(mf2)
x2 <- model.matrix(Terms2, mf2)[,-1, drop=FALSE]
x2
x[,'age']
x2[,'age']
x2[,'age']
names(x2)
colnames(x2)
Terms
newdata
dim(newdata)
length(newdata)
mf
n=3
seq(1,3)
strata2
a <- c(1,2,3,4)
b <- c(5,6)
outer(a, b, '*')
stats::model.frame(Terms2, data=dnewdata, na.action=na.action, xlev=fit$xlevels)
dmewdata
document()
library(devtools)
document()
document()
document()
document()
library(devtools)
document()
document()
document()
install.packages("timereg")
?wald.test
??wald.test
edit(wald.test)
edit(wald.test)
m <- AIPWsubtype(formula = Surv(start, time, status) ~ Xconstvar = NULL + strata(W),
data = sim.data0[, -c(2, 7, 8, 9)], id = "nid", missing_model = list(~time +
X), two_stage = two_stage, marker_name = "y2",
second_cont_bl = FALSE, second_cont_rr = FALSE)
document()
document()
document()
document()
document()
document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
document()
a = 3
b = 5
a>b
a = c("a", "b", "c")
b = c("a", "d")
diff(a,b)
b = c("a")
diff(a,b)
setdiff(a,b)
document()
500-193.29
library(AIPWsubtype)
??AIPWsubtype
?AIPWsubtype
document()
library(devtools)
document()
